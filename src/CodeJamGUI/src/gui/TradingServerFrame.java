package gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JInternalFrame;
import javax.swing.JTable;
import javax.swing.Timer;
import org.jfree.chart.ChartPanel;

/**
 *  TradingServerFrame
 * 
 *  This is the main gui application.
 *  Run this.
 * 
 *  @author mattvertescher
 */
public class TradingServerFrame extends javax.swing.JFrame implements ActionListener {

    private StockGraph gp1, gp2, gp3, gp4;
    private TransactionHistory th; 
   
    /**
     * Creates new frame, LayoutFrame
     * 
     * @author mattvertescher
     */
    public TradingServerFrame() {
        initComponents();
        
        // Set the on screen starting location of the GUI
        this.setLocation(100, 100);
        
        // Create new GraphPanels
        gp1 = new StockGraph("Strategy 1");
        gp2 = new StockGraph("Strategy 2");
        gp3 = new StockGraph("Strategy 3");
        gp4 = new StockGraph("Strategy 4");
        
        
        setFrameContent(graphInternalFrame1,gp1.getChartPanel());
        setFrameContent(graphInternalFrame3,gp2.getChartPanel());
        setFrameContent(graphInternalFrame2,gp3.getChartPanel());
        setFrameContent(graphInternalFrame4,gp4.getChartPanel());
       
        //graphInternalFrame1.setTitle("Strategy 1");
        
        
        sendReportMenuItem.setEnabled(false);
        
    }

    /**
     * Tells the graphs to update themselves
     * 
     * @author mattvertescher
     */
    private void updateGraphs() {
        gp1.updateAllSeries();
        gp2.updateAllSeries();
        gp3.updateAllSeries();
        gp4.updateAllSeries();
        
        setFrameContent(graphInternalFrame1,gp1.getChartPanel());
        setFrameContent(graphInternalFrame3,gp2.getChartPanel());
        setFrameContent(graphInternalFrame2,gp3.getChartPanel());
        setFrameContent(graphInternalFrame4,gp4.getChartPanel());
        
        graphInternalFrame1.updateUI();
        graphInternalFrame3.updateUI();
        graphInternalFrame2.updateUI();
        graphInternalFrame4.updateUI();
    }
  
    /**
     * Sets the content for the internal frames
     * 
     * @param f InternalFrame to set content for
     * @param p The content to set in frame
     * 
     * @author mattvertescher
     */
    private void setFrameContent(JInternalFrame f, ChartPanel p) {
        p.setVisible(true);
        p.setSize(200,300);
        f.setResizable(true);
        f.setContentPane(p);
    }
    
    /**
     * Tells the tables to update themselves
     * 
     * @author mattvertescher
     */
    private void updateTables() {

        th = new TransactionHistory();
        
        updateTable(historyTable1,th.getStrategy1History());
        updateTable(historyTable2,th.getStrategy2History());
        updateTable(historyTable3,th.getStrategy3History());
        updateTable(historyTable4,th.getStrategy4History());
        
        
        
    }
    
    private void updateTable(JTable t, String[][] h) {
        
        
        int r = 0;
        while (h.length > r && 100 > r) {
            for (int c = 0; c < 3; c++)
                t.getModel().setValueAt(h[r][c], r, c);
            r += 1; 
        }   
        
    }
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        mainTabbedPane = new javax.swing.JTabbedPane();
        graphPanel = new javax.swing.JPanel();
        graphInternalFrame1 = new javax.swing.JInternalFrame();
        graphInternalFrame3 = new javax.swing.JInternalFrame();
        graphInternalFrame2 = new javax.swing.JInternalFrame();
        graphInternalFrame4 = new javax.swing.JInternalFrame();
        schedulePanel = new javax.swing.JPanel();
        ganttPanel = new GanttSchedule();
        historyPanel1 = new javax.swing.JPanel();
        tableScrollPane1 = new javax.swing.JScrollPane();
        historyTable1 = new javax.swing.JTable();
        historyPanel2 = new javax.swing.JPanel();
        tableScrollPane2 = new javax.swing.JScrollPane();
        historyTable2 = new javax.swing.JTable();
        historyPanel3 = new javax.swing.JPanel();
        tableScrollPane3 = new javax.swing.JScrollPane();
        historyTable3 = new javax.swing.JTable();
        historyPanel4 = new javax.swing.JPanel();
        tableScrollPane4 = new javax.swing.JScrollPane();
        historyTable4 = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        startPriceFeedMenuItem = new javax.swing.JMenuItem();
        sendReportMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trading Server");
        setResizable(false);

        graphInternalFrame1.setFocusable(false);
        graphInternalFrame1.setPreferredSize(new java.awt.Dimension(300, 200));
        graphInternalFrame1.setVisible(true);

        org.jdesktop.layout.GroupLayout graphInternalFrame1Layout = new org.jdesktop.layout.GroupLayout(graphInternalFrame1.getContentPane());
        graphInternalFrame1.getContentPane().setLayout(graphInternalFrame1Layout);
        graphInternalFrame1Layout.setHorizontalGroup(
            graphInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 528, Short.MAX_VALUE)
        );
        graphInternalFrame1Layout.setVerticalGroup(
            graphInternalFrame1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 281, Short.MAX_VALUE)
        );

        graphInternalFrame3.setPreferredSize(new java.awt.Dimension(500, 300));
        graphInternalFrame3.setVisible(true);

        org.jdesktop.layout.GroupLayout graphInternalFrame3Layout = new org.jdesktop.layout.GroupLayout(graphInternalFrame3.getContentPane());
        graphInternalFrame3.getContentPane().setLayout(graphInternalFrame3Layout);
        graphInternalFrame3Layout.setHorizontalGroup(
            graphInternalFrame3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        graphInternalFrame3Layout.setVerticalGroup(
            graphInternalFrame3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 264, Short.MAX_VALUE)
        );

        graphInternalFrame2.setPreferredSize(new java.awt.Dimension(500, 300));
        graphInternalFrame2.setVisible(true);

        org.jdesktop.layout.GroupLayout graphInternalFrame2Layout = new org.jdesktop.layout.GroupLayout(graphInternalFrame2.getContentPane());
        graphInternalFrame2.getContentPane().setLayout(graphInternalFrame2Layout);
        graphInternalFrame2Layout.setHorizontalGroup(
            graphInternalFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );
        graphInternalFrame2Layout.setVerticalGroup(
            graphInternalFrame2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        graphInternalFrame4.setPreferredSize(new java.awt.Dimension(500, 300));
        graphInternalFrame4.setVisible(true);

        org.jdesktop.layout.GroupLayout graphInternalFrame4Layout = new org.jdesktop.layout.GroupLayout(graphInternalFrame4.getContentPane());
        graphInternalFrame4.getContentPane().setLayout(graphInternalFrame4Layout);
        graphInternalFrame4Layout.setHorizontalGroup(
            graphInternalFrame4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 556, Short.MAX_VALUE)
        );
        graphInternalFrame4Layout.setVerticalGroup(
            graphInternalFrame4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 0, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout graphPanelLayout = new org.jdesktop.layout.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(graphPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(graphInternalFrame1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                    .add(graphInternalFrame3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(graphInternalFrame4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .add(graphInternalFrame2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE))
                .addContainerGap())
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(graphPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(graphInternalFrame1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .add(graphInternalFrame2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(graphPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(graphInternalFrame3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .add(graphInternalFrame4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );

        mainTabbedPane.addTab("Graphs", graphPanel);

        org.jdesktop.layout.GroupLayout ganttPanelLayout = new org.jdesktop.layout.GroupLayout(ganttPanel);
        ganttPanel.setLayout(ganttPanelLayout);
        ganttPanelLayout.setHorizontalGroup(
            ganttPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 1138, Short.MAX_VALUE)
        );
        ganttPanelLayout.setVerticalGroup(
            ganttPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 643, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout schedulePanelLayout = new org.jdesktop.layout.GroupLayout(schedulePanel);
        schedulePanel.setLayout(schedulePanelLayout);
        schedulePanelLayout.setHorizontalGroup(
            schedulePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ganttPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        schedulePanelLayout.setVerticalGroup(
            schedulePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(schedulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ganttPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Manager Schedule", schedulePanel);

        historyTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Time", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane1.setViewportView(historyTable1);

        org.jdesktop.layout.GroupLayout historyPanel1Layout = new org.jdesktop.layout.GroupLayout(historyPanel1);
        historyPanel1.setLayout(historyPanel1Layout);
        historyPanel1Layout.setHorizontalGroup(
            historyPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyPanel1Layout.setVerticalGroup(
            historyPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Strategy 1 History", historyPanel1);

        historyTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Time", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane2.setViewportView(historyTable2);

        org.jdesktop.layout.GroupLayout historyPanel2Layout = new org.jdesktop.layout.GroupLayout(historyPanel2);
        historyPanel2.setLayout(historyPanel2Layout);
        historyPanel2Layout.setHorizontalGroup(
            historyPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyPanel2Layout.setVerticalGroup(
            historyPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Strategy 2 History", historyPanel2);

        historyTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Time", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane3.setViewportView(historyTable3);

        org.jdesktop.layout.GroupLayout historyPanel3Layout = new org.jdesktop.layout.GroupLayout(historyPanel3);
        historyPanel3.setLayout(historyPanel3Layout);
        historyPanel3Layout.setHorizontalGroup(
            historyPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyPanel3Layout.setVerticalGroup(
            historyPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Strategy 3 History", historyPanel3);

        historyTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Time", "Type", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableScrollPane4.setViewportView(historyTable4);

        org.jdesktop.layout.GroupLayout historyPanel4Layout = new org.jdesktop.layout.GroupLayout(historyPanel4);
        historyPanel4.setLayout(historyPanel4Layout);
        historyPanel4Layout.setHorizontalGroup(
            historyPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1138, Short.MAX_VALUE)
                .addContainerGap())
        );
        historyPanel4Layout.setVerticalGroup(
            historyPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, historyPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(tableScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainTabbedPane.addTab("Strategy 4 History", historyPanel4);

        org.jdesktop.layout.GroupLayout mainPanelLayout = new org.jdesktop.layout.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainTabbedPane)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainTabbedPane)
        );

        jMenu1.setText("MSET");

        startPriceFeedMenuItem.setText("Start Price Feed");
        startPriceFeedMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startPriceFeedMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(startPriceFeedMenuItem);

        sendReportMenuItem.setText("Send Report");
        sendReportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendReportMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(sendReportMenuItem);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPriceFeedMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPriceFeedMenuItemActionPerformed
        System.out.println("StartPriceFeedActionPreformed");
        
        updateGraphs();

        updateTables();
        
        int speed = 1, pause = 1000;
        Timer timer = new Timer(speed, this);
        timer.setInitialDelay(pause);
        timer.start();
        
    }//GEN-LAST:event_startPriceFeedMenuItemActionPerformed

    private void sendReportMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendReportMenuItemActionPerformed
        
        
        // CONVERT JSON TO PDF HERE
        
        
        
    }//GEN-LAST:event_sendReportMenuItemActionPerformed

    /**
     * Timer Action 
     * 
     * @param e ActionEvent
     * 
     * @author mattvertescher
     */
    public void actionPerformed(ActionEvent e) {
        //System.out.println("Timer");
        updateGraphs();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Sets the JTattoo look and feel
         */
        try {
            com.jtattoo.plaf.noire.NoireLookAndFeel.setTheme("Small-Font");
            javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.aluminium.AluminiumLookAndFeel");
        }
        catch (Exception ex) {
            ex.printStackTrace();
        }
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TradingServerFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ganttPanel;
    private javax.swing.JInternalFrame graphInternalFrame1;
    private javax.swing.JInternalFrame graphInternalFrame2;
    private javax.swing.JInternalFrame graphInternalFrame3;
    private javax.swing.JInternalFrame graphInternalFrame4;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JPanel historyPanel1;
    private javax.swing.JPanel historyPanel2;
    private javax.swing.JPanel historyPanel3;
    private javax.swing.JPanel historyPanel4;
    private javax.swing.JTable historyTable1;
    private javax.swing.JTable historyTable2;
    private javax.swing.JTable historyTable3;
    private javax.swing.JTable historyTable4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel schedulePanel;
    private javax.swing.JMenuItem sendReportMenuItem;
    private javax.swing.JMenuItem startPriceFeedMenuItem;
    private javax.swing.JScrollPane tableScrollPane1;
    private javax.swing.JScrollPane tableScrollPane2;
    private javax.swing.JScrollPane tableScrollPane3;
    private javax.swing.JScrollPane tableScrollPane4;
    // End of variables declaration//GEN-END:variables
}
